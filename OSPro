Name: Aman Choudhary
Reg no:11701291


Ques. 9. Design a scheduler that uses a preemptive priority scheduling algorithm based on dynamically changing priority. Larger number for priority indicates higher priority.
Assume that the following processes with arrival time and service time wants to execute (for reference):

Process ID        	Arrival Time    	Service Time
P1                       	 0                         	 4
P2                       	 1                         	 1
P3                       	 2                         	 2
P4                       	 3                         	 1

When the process starts execution (i.e. CPU assigned), priority for that process changes at the rate of m=1.When the process waits for CPU in the ready queue (but not yet started execution), its priority changes at a rate n=2. All the processes are initially assigned priority value of 0 when they enter ready queue for the first time . The time slice for each process is q = 1. When two processes want to join ready queue simultaneously, the process which has not executed recently is given priority. Calculate the average waiting time for each process. The program must be generic i.e. number of processes, their burst time and arrival time must be entered by user. 

#include <bits/stdc++.h>
 namespace std; 
#define totalprocess 5 
// Making a struct to store the given input at that time.  
struct process 
{ 
int at,bt,pr,pno; 
}; 
process proc[50]; 
/* 
Writing comparator function to sort accordingly to the priority if  the arrival time is same  
*/

 boot comp(process a, process b) 
{ 
if(a.at == b.at) 
{ 
return a.pr<b.pr; 
} 
else
{ 
  return a.at<b.at; 
} 
}
// Using FCFS Algorithm to find Waiting time 
void get_wt_time(int wt[]) 
{ 
// declaring service array that stores cumulative burst time  
int service[50]; 

  
// Initializing initial elements of the arrays 
service[0]=0; 
wt[0]=0; 
for(int i=1;i<totalprocess;i++) 
{ 
service[i]=proc[i-1].bt+service[i-1]; 
wt[i]=service[i]-proc[i].at+1; 
// If waiting time is negative, change it into zero 
    if(wt[i]<0) 
    {     wt[i]=0; 
    } 
} } 
void get_tat_time(int tat[],int wt[]) 
{ 
// Filling turnaroundtime array 
for(int i=0;i<totalprocess;i++) 
{ 
 tat[i]=proc[i].bt+wt[i]; 
} } 
void findgc() 
{ 
//Declare waiting time and turnaround time array 
int wt[50],tat[50]; 
double wavg=0,tavg=0; 
// Function call to find waiting time array 
get_wt_time(wt); 
//Function call to find turnaround time 
get_tat_time(tat,wt); 
int stime[50],ctime[50]; 
stime[0]=1; 
ctime[0]=stime[0]+tat[0]; 

// calculating starting and ending time 
for(int i=1;i<totalprocess;i++) 
    { 

        stime[i]=ctime[i-1]; 

        ctime[i]=stime[i]+tat[i]-wt[i]; 

    } 

cout<<"Process_no\tStart_time\tComplete_time\tTurn_Around_Time\tWaiting_Time"<<endl; 
   // display the process details 
for(int i=0;i<totalprocess;i++) 
   {     wavg += wt[i];
   tavg += tat[i]; 
     cout<<proc[i].pno<<"\t\t"<<
   stime[i]<<"\t\t"<<ctime[i]<<"\t\t"<< 
    tat[i]<<"\t\t\t"<<wt[i]<<endl; 

    } 
 // display the average waiting time 
  //and average turn around time
   cout<<"Average waiting time is : "; 
   cout<<wavg/(float)totalprocess<<endl; 
  cout<<"average turnaround time : "; 
   cout<<tavg/(float)totalprocess<<endl;
}
int main() 
{ int arrivaltime[] = { 1, 2, 3, 4, 5 }; 
int bursttime[] = { 3, 5, 1, 7, 4 }; 
int priority[] = { 3, 4, 1, 7, 8 }; 

      

for(int i=0;i<totalprocess;i++) 
{    proc[i].at=arrivaltime[i]; 
   proc[i].bt=bursttime[i]; 
proc[i].pr=priority[i];
   proc[i].pno=i+1; 

    }  
   //Using inbuilt sort function 
    sort(proc,proc+totalprocess,comp); 
   //Calling function findgc for finding Gantt Chart 
   findgc(); 
    return 0; 
} 


 Q36. Consider the following set of processes, with the length of the CPU burst given in milliseconds:




Schedule the processes using SJF scheduling, and print the outlook of Gant Chart on the computer screen.

#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 100

struct process {
    int pid;
    int burst_time;
    int waiting_time;
};

typedef struct process Process;


double average_waiting_time;
int total_waiting_time;

void sort_process_by_burst_time(Process p[], int n);
void calculate_waiting_time(Process p[], int n);
void print_gantt_chart(Process p[], int n);

int main()
{
    Process p[MAX_PROCESS];
    int n, i, j;
    puts("SHORTEST JOB FIRST SCHEDULING ALGORITHM");
    puts("=======================================");

    printf("Enter total process: ");
    scanf("%d", &n);
    printf("Enter burst time for each process:\n");
    for(i=0; i<n; i++) {
        printf("P[%d]: ", i+1);
        scanf("%d", &p[i].burst_time);
        p[i].pid = i+1;
    }

    sort_process_by_burst_time(p, n);
    calculate_waiting_time(p, n);

    average_waiting_time = (double) ( (double)total_waiting_time / (double) n );

    puts("");
    printf("Average Waiting Time: %.2lf\n",average_waiting_time);

    printf("Gantt Chart:\n");
    print_gantt_chart(p, n);


    return 0;
}

void sort_process_by_burst_time(Process p[], int n)
{
    int i, j;
    Process temp;
    for(i=0; i<n-1; i++) {
        for(j=0; j<n-1-i; j++) {
            if(p[j].burst_time > p[j+1].burst_time) {
                temp = p[j];
                p[j] = p[j+1];
                p[j+1] = temp;
            }
        }
    }
}

void calculate_waiting_time(Process p[], int n)
{
    int i;
    total_waiting_time = 0;
    p[0].waiting_time = 0;
    for(i=1; i<n; i++) {
        p[i].waiting_time = p[i-1].waiting_time + p[i-1].burst_time;
        total_waiting_time += p[i].waiting_time;
    }
}

void print_gantt_chart(Process p[], int n)
{
    int i, j;
    int last = p[n-1].burst_time + ( n== 1 ? 0 : p[n-1].waiting_time);
    // printing top bar
    printf(" ");
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n|");
    // middle position
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time-1; j++) printf(" ");
        printf("p%d", p[i].pid);
        for(j=0; j<p[i].burst_time-1; j++) printf(" ");
        printf("|");
    }
    printf("\n ");
    // bottom bar
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n");

    // printing waiting time
    int minus = 0;
    for(i=0; i<n; i++) {
        if(p[i].waiting_time>9) printf(" ");
        printf("%d", p[i].waiting_time);
        if(p[i+1].waiting_time>9){
          minus = 1;
        }
        if(i+1 == n )  if (last>9) minus = 1;
        for(j=0; j<p[i].burst_time-minus; j++) printf("  ");

    }
    if(last>9) printf(" ");
    printf("%d\n", last);
}
